#!/usr/bin/env sh

#shellcheck disable=2016
usage() {
    echo 'todo  -- task organizer & daily optimizer'
    echo ''
    echo 'usage:'
    echo '  todo list  [search]  | (default action) list all items matching `search`'
    echo '  todo add   [dir]     | add new item in `dir`'
    echo '  todo cat   [search]  | describe all items matching `search`'
    echo '  todo edit  [search]* | edit description of item matching `search`'
    echo '  todo title [search]* | edit title of item matching `search`'
    echo '  todo set   [search]* | set `state` of item matching `search`'
    echo '                       |     state := (todo|open|hold|done|ever)'
    echo '  todo rm    [search]* | remove item matching `search`'
    echo '  todo dir   [search]* | print directory of task matching `search`'
    echo '                       |     add the following to your shell rc:'
    echo '                       |     tcd() { cd "$(todo dir "$1")"; }'
    echo '                       |'
    echo '  todo help            | show this help'
    echo ''
    echo '[search] strings will match:'
    echo '  - task IDs'
    echo '  - task names'
    echo '  - if -a flag is used, any file within a task'
    echo '*: must manually select from multiple results.'
    echo ''
    exit "$1"
}

search() {
    if [ "$1" = '-a' ]; then
        search_all=1
        shift
    fi

    term="$*"

    if [ -z "$1" ]; then
        fd --strip-cwd-prefix -t d "[0-9a-f]{6}$" -x echo {}
        return
    fi

    for item in $(fd --strip-cwd-prefix -t d "[0-9a-f]{6}$"); do
        cd "$TODO_DIR/$item" || exit 1

        # match filename
        case "$item" in
            *"$term"*)
                found=1
                echo "$item" | sed 's:/$::'
                continue
                ;;
        esac

        # match filename
        case "$(cat title)" in
            *"$term"*)
                found=1
                echo "$item" | sed 's:/$::'
                continue
                ;;
        esac

        # match any file
        if [ -n "$search_all" ] && { fd -q "$term" || rg -qi "$term"; }; then
            found=1
            echo "$item" | sed 's:/$::'
            continue
        fi
    done

    cd "$TODO_DIR" || exit 1

    if [ -z "$found" ]; then
        echo no tasks found for search string \""$term"\" > /dev/stderr
    fi
}

search_select() {
    desc="$1"
    shift

    path="$(search "$*")"
    lines="$(echo "$path" | wc -l)"

    if [ "$lines" -gt 1 ]; then
        echo "$path" | while read -r item; do
            describe "$item"
        done | nl > /dev/stderr
        printf 'select task to %s) ' "$desc" > /dev/stderr
        read -r sel
        if [ -n "${sel##*[!0-9]*}" ] \
                && [ "$sel" -ge 1 ] \
                && [ "$sel" -le "$lines" ]; then
            path="$(echo "$path" | sed "$sel!d")"
        else
            echo invalid selection: "$sel"
            exit 1
        fi
    fi

    echo "$path"
}

describe() {
    item="$1"
    state="$(cat "$item/state" 2> /dev/null)"
    case "$state" in
        todo) statefmt=$(color wht %s) ;;
        open) statefmt=$(color -b yel %s) ;;
        hold) statefmt=$(color red %s) ;;
        ever) statefmt=$(color prp %s) ;;
        done) statefmt=$(color grn %s) ;;
    esac
    printf "$(color yel %s/)%s | $statefmt | $(color blu %s)\n" \
        "$(dirname "$item")" \
        "$(basename "$item")" \
        "$state" \
        "$(cat "$item/title")"
}

TODO_DIR="${TODO_DIR:-$HOME/docs/todo}"
cd "$TODO_DIR" || exit 1

cmd="$1"
[ -n "$cmd" ] && shift

case "$cmd" in
    '' | l | list)
        search "$@" \
            | while read -r item; do describe "$item" & done \
            | sort -b -t '|' -k 2r,2 -k 1,1 \
            | tabulate -s '\|' -f plain
        ;;

    a | add)
        # generate name
        dir="${1:-.}"
        while [ -z "$path" ] || [ -f "$path" ]; do
            path="$dir/$(hexdump -vn3 -e'"%06x" 1 "\n"' /dev/urandom)"
        done

        # edit tmp file
        tmpfile="$(mktemp)"
        $EDITOR "$tmpfile" -c 'set ft=markdown' || exit 1
        if [ ! -s "$tmpfile" ] || [ "$(wc -c < "$tmpfile")" -le 1 ]; then
            echo aborting new todo item.
            exit
        fi

        mkdir -pv "$path"
        head -n 1 "$tmpfile" > "$path/title"
        sed -e '1d' -e '/./,$!d' "$tmpfile" > "$path/desc.md"

        echo 'todo' > "$path/state"

        rm "$tmpfile"
        ;;

    c | cat)
        search "$@" | while read -r path; do
            [ -n "$not_first" ] && echo

            {
                cat "$path/desc.md"

                cd "$path" || exit 1
                files="$(fd -t f --exclude title --exclude state --exclude desc.md)"
                if [ -n "$files" ]; then
                    echo
                    color yel 'files:\n'
                    color wht "$files"
                fi
            } | bat \
                --file-name="$(describe "$path")" \
                -f \
                --style=grid,header \
                --paging=never \
                --terminal-width="$(tput cols)"

            cd "$TODO_DIR" || exit 1

            not_first=1
        done | bat -p
        ;;

    e | edit)
        path=$(search_select edit "$@")
        [ -z "$path" ] && exit 1
        $EDITOR "$path/desc.md"
        ;;

    t | title)
        path=$(search_select retitle "$@")
        [ -z "$path" ] && exit 1
        $EDITOR "$path/title"
        ;;

    s | set)
        state="$1"
        case "$state" in
            todo | open | hold | done | ever) ;;
            *) usage 1 ;;
        esac
        shift
        path=$(search_select "set as '$state'" "$@")
        [ -z "$path" ] && exit 1
        echo "$state" > "$path/state"
        ;;

    r | rm)
        path=$(search_select remove "$@")
        printf 'remove %s (%s)? [y/N] ' "$path" "$(cat "$path/title")"
        read -r ans
        if echo "$ans" | grep -qiE '^y(es)?$'; then
            rm -r "${TODO_DIR:-.}/$path"
            echo removed "$path"
        fi
        ;;

    dir)
        [ -n "$1" ] && path=$(search_select 'cd to' "$@")
        echo "$TODO_DIR/$path"
        ;;

    h | help)
        usage 0
        ;;

    *)
        usage 1
        ;;
esac
