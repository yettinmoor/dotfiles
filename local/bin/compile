#!/usr/bin/env sh
# All-in-one file compiler.

if [ "$1" = -f ]; then
    shift
    ft="$1"
    shift
fi

file="$(readlink -f "$1")"
dir="$(dirname "$file")"
noext="${file%.*}"

# -----

# `compile: <cmd>` in the first line
[ -f "$file" ] && {
    cmd="$(head -n 1 "$file" | rg -o 'compile: (.+)' -r '$1')"
    [ -n "$cmd" ] && {
        if echo "$cmd" | grep -q '{}'; then
            sh -c "$(echo "$cmd" | sed "s:{}:$file:g")"
        else
            $cmd "$file"
        fi
        exit
    }
}

# try a bunch of different files
[ -f .compile ] && { sh .compile "$@"; exit; }
[ -x mk ]       && { ./mk "$@"; exit; }
[ -x make.sh ]  && { ./make.sh "$@"; exit; }
[ -f Makefile ] && { make "$@"; exit; }

[ -z "$file" ] && {
    echo nothing to do
    exit 1
}

case "$ft" in
    # shell
    sh) sh "$file" ;;

    # programming
    c)           cc "$file" -o "$noext" -g ;;
    cpp)         g++ "$file" -o "$noext" ;;
    cs)          mcs "$file" ;;
    go)          go run "$file" ;;
    haskell)     runhaskell "$file" ;;
    javascript)  node "$file" ;;
    lua)         lua "$file" ;;
    nim)         if fd -q -e nimble; then nimble build; else nim c "$file"; fi ;;
    nil)         ~/dev/nil/zig-out/bin/nil run "$file" ;;
    pl)          perl "$file" ;;
    rkt)         racket "$file" ;;
    rust)        cargo run ;;
    scm)         chicken-csi -q "$file" ;;
    typescript)  deno run --allow-read "$file" ;;
    zig)         zig build run ;;

    # documents
    tex)      xelatex --output-directory="$dir" "$noext" ;;
    markdown) pandoc "$file" --pdf-engine=xelatex -o "$noext".pdf ;;
    sent)     setsid sent "$file" & ;;

    # custom formats
    mnemo) mnemo -i "$file" ;;

    # shebang
    *) $ft "$file" ;;
esac
